#!/bin/bash -e
###########################################################################
#
# Hyperbox - Virtual Infrastructure Manager
# Copyright (C) 2015 Maxime Dor
#
# http://kamax.io/hbox/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

echo "Hyperbox Fork utility"
echo ""

# show usage information
show_usage() {
    echo "usage:  fork [--org <organization>]"
    echo "        fork -h" 
    echo ""
    echo "Forks all the hyperbox repositories into new repositories in a Github user or organization."
    echo "By default, the fork repositories are cretaed in the current hub user"
    echo 
    echo "  -o | --org <organization>    Create the forks in a organization"
    echo "  -h                           Show usage"
    echo ""
    exit 1
}

# exit showing an error message
die() {
    printf '%s\n' "$1" >&2
    exit 1
}

# function to fork the repository in the current folder
fork_current_repo () {
    # fork the repository in Github
    if [ -z $ORGNAME ]; then
        hub fork
    else
        hub fork --org=$ORGNAME
    fi
}

# show usage information
if [ "$1" = "-h" ]; then
    show_usage
    die
fi

# determine organization name if it is provided
ORGNAME=""
if [ "$1" = "--org" -o "$1" = "-o" ]; then
    if [ "$2" ]; then
        ORGNAME=$2
    else
        die 'ERROR: "--org" requires a non-empty organization name'
    fi
fi

# check if hub is installed
if [ ! -x "$(command -v hub)" ]; then
    die "ERROR: the 'hub' command is not installed. Please check https://github.com/github/hub"
fi


# determine the set of modules in the repository
MODULES=$(grep path .gitmodules | sed  's/.*= //')

# check if the modules have been initialized
while read -r module; do
    pushd $module > /dev/null
    if [ ! -f ".gitignore" ]; then
        die "ERROR: $module has been not initialized. You must run the 'init' script before."
    fi
    popd > /dev/null
done <<< "$MODULES"

# fork the main repository
echo "forking parent repository"
fork_current_repo 

# for each submodule
while read -r module; do
    echo
    echo "forking module: $module"
    pushd $module > /dev/null
    fork_current_repo
    popd > /dev/null
done <<< "$MODULES"

# That's all folks
echo ""
echo "done."
