#!/bin/bash -e
###########################################################################
#
# Hyperbox - Virtual Infrastructure Manager
# Copyright (C) 2015 Maxime Dor
#
# http://kamax.io/hbox/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

echo "Hyperbox Fork utility"
echo ""

# show usage information
show_usage() {
    echo "usage:  fork [-org <organization>] [--create] <username>" 
    echo ""
    echo "Forks all the hyperbox repositories into new repositories in a Github user or organization"
    echo "  <username>                   Github username"
    echo "  -o | --org <organization>    Create the forks in a organization instead of the username"
    echo "  -c | --create                Ask for a password and create the forks in Github"
    echo ""
    exit 1
}

# exit showing an error message
die() {
    printf '%s\n' "$1" >&2
    exit 1
}

# function to fork the repository in the current folder
fork_current_repo () {
    local PWD="$(pwd)"
    local REPONAME="$(basename $PWD)"
    local REPOURL="https://github.com/$ORGNAME/$REPONAME"

    # rename origin to upstream if upstream does not exist
    if [ -z "$(git config remote.upstream.url)" ]; then
        echo "    renaming origin remote to upstream"
        git remote rename origin upstream
    fi

    # remove origin if it exists
    if [ ! -z "$(git config remote.origin.url)" ]; then
        echo "    removing origin remote"
        git remote remove origin
    fi
    # add the origin to the new repository
    echo "    adding the new origin remote: $REPOURL.git"
    git remote add origin $REPOURL.git

    # create the repository in Github if it does not exist
    if [ "$CREATE" == "1" ]; then
        if [ ! "$(curl -s --head GET $REPOURL 2>&1 | grep 404 | wc -l)" == "0" ]; then
            echo "    creating fork-repository $REPOURL in Github"
            if [ ! "$ORGNAME" == "$USERNAME" ]; then
                curl -s "https://api.github.com/repos/hyperbox/$REPONAME/forks" -d "{"\""organization"\"":"\""$ORGNAME"\""}" -K- <<< "user="\""$USERNAME:$PASSWD"\"""  > /dev/null
            else
                curl -s "https://api.github.com/repos/hyperbox/$REPONAME/forks"  -d '' -K- <<< "user="\""$USERNAME:$PASSWD"\""" > /dev/null
            fi 
        else
            echo "    fork-repository $REPOURL already exists in Github"
        fi
    fi
}

CREATE=0
USERNAME=""
ORGNAME=""

# show usage information if not parameter is given
if [ -z "$1" ]; then
    show_usage
    die
fi

# process parameters
while :; do
    if [ -z "$1" ]; then
        break
    fi   
    case $1 in
        -o|--org)
            if [ "$2" ]; then
                ORGNAME=$2
                shift
            else
                die 'ERROR: "--org" requires a non-empty option'
            fi
            ;;
         -c|--create)
            CREATE=1
            ;;
         *) 
            if [ -z "$USERNAME" ]; then
                USERNAME=$1
            else
                die 'ERROR: you cannot provide two usernames'
            fi
            ;; 
    esac
    shift
done

if [ -z "$USERNAME" ]; then
    die 'ERROR: you must  provide a username'
fi 
if [ -z "$ORGNAME" ]; then
    ORGNAME=$USERNAME
fi

# check if the modules have been initialized
if [ ! -f "./modules/client/.gitignore" ]; then
    die "ERROR: you must initialize the submodules first. Run the init script"
fi

# Read the password to be used to create the repositories in Github
if [ "$CREATE" == "1" ]; then
    echo "Github password (used to create the forks):"
    read -s PASSWD
    echo
    CURL_AUTH="$USERNAME:$PASSWD"
fi

# determine the set of modules in the repository
MODULES=$(grep path .gitmodules | sed  's/.*= //')

# fork the main repository
echo "forking parent repository"
fork_current_repo 

# fork each submodule
while read -r module; do
    echo "forking module: $module"
    pushd $module > /dev/null
    fork_current_repo
    popd > /dev/null
done <<< "$MODULES"

# That's all folks
echo ""
echo "done."
